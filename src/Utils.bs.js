// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function $$parseInt(defaultValue, str) {
  var value = Number(str);
  if (isNaN(value)) {
    return defaultValue;
  } else {
    return value | 0;
  }
}

function promiseMap(f) {
  return (function (param) {
      return param.then((function (x) {
                    return Promise.resolve(Curry._1(f, x));
                  }));
    });
}

function promiseEnd(promise) {
  promise.catch((function (error) {
          console.log(error);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function exnCode(exn) {
  return Caml_option.undefined_to_opt(exn.code);
}

function parseJson(data) {
  try {
    return Caml_option.some(JSON.parse(data));
  }
  catch (exn){
    return ;
  }
}

function memoize(fn) {
  var cache = /* record */[/* contents */undefined];
  return (function (arg) {
      var match = cache[/* contents */0];
      if (match !== undefined) {
        return Caml_option.valFromOption(match);
      } else {
        var result = Curry._1(fn, arg);
        cache[0] = Caml_option.some(result);
        return result;
      }
    });
}

function magicAsArray(item) {
  if (Array.isArray(item)) {
    return item;
  } else {
    return /* array */[item];
  }
}

function handleJson(response, failure, decoder, jsonString) {
  var json;
  try {
    json = Json.parseOrRaise(jsonString);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Json.ParseError) {
      return Curry._1(failure, exn[1]);
    } else {
      throw exn;
    }
  }
  var data;
  try {
    data = Curry._1(decoder, json);
  }
  catch (raw_exn$1){
    var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
    if (exn$1[0] === Json_decode.DecodeError) {
      return Curry._1(failure, exn$1[1]);
    } else {
      throw exn$1;
    }
  }
  Curry._1(response, data);
  return /* () */0;
}

function arg(__x) {
  console.log("Error: ", __x);
  return /* () */0;
}

function handleJsonWithErrorLog(param) {
  return (function (param$1, param$2) {
      return handleJson(param, arg, param$1, param$2);
    });
}

function nullableToString(string) {
  if (string == null) {
    return "";
  } else {
    return string;
  }
}

function arrMapReduce(value, initial, f, f2) {
  var __x = $$Array.map(f, value);
  return $$Array.fold_left(f2, initial, __x);
}

function concat(a, b) {
  return a + b;
}

function markdownwrap(string, markType) {
  return ("\n```" + (String(markType) + ("\n" + (String(string) + "\n```\n")))).trim();
}

function wrapWithString(wrapString, string) {
  return wrapString + (string + wrapString);
}

function boldWrap(param) {
  return wrapWithString("**", param);
}

function italicizeWrap(param) {
  return wrapWithString("_", param);
}

function underlineWrap(param) {
  return wrapWithString("__", param);
}

function slashWrap(param) {
  return wrapWithString("~~", param);
}

function doubleQuoteWrap(param) {
  return wrapWithString("\"", param);
}

function singleQuoteWrap(param) {
  return wrapWithString("'", param);
}

function spoilerWrap(param) {
  return wrapWithString("||", param);
}

function spaceForWeb(str) {
  var re = new RegExp("\\s", "ig");
  return str.replace(re, "%20");
}

function shortenString(string) {
  return (function (param) {
                  return (function (param$1) {
                      return string.slice(param, param$1);
                    });
                })(0)(350).concat("...");
}

function nextElement(array, element) {
  var value = array.indexOf(element);
  if (value !== -1) {
    var match = array.length === (value + 1 | 0);
    if (match) {
      return Caml_array.caml_array_get(array, 0);
    } else {
      return Caml_array.caml_array_get(array, value + 1 | 0);
    }
  } else {
    return Caml_array.caml_array_get(array, 0);
  }
}

function reverse(string) {
  return string.split("").reverse().join("");
}

function readConfigFile(param) {
  var path = Path.resolve(__dirname, "..");
  var filePath = Path.join(path, "config.json");
  var json = Json.parseOrRaise(Fs.readFileSync(filePath, "utf8"));
  return /* record */[
          /* version */Json_decode.field("version", Json_decode.string, json),
          /* devToken */Json_decode.field("devToken", Json_decode.string, json),
          /* prodToken */Json_decode.field("prodToken", Json_decode.string, json),
          /* owner */Json_decode.field("owner", Json_decode.string, json),
          /* nameColor */Json_decode.field("nameColor", Json_decode.string, json),
          /* nameColorPro */Json_decode.field("nameColorPro", Json_decode.string, json),
          /* roleColor */Json_decode.field("roleColor", Json_decode.string, json),
          /* embedColor */Json_decode.field("embedColor", Json_decode.string, json),
          /* inviteMessage */Json_decode.field("inviteMessage", Json_decode.string, json),
          /* oxfordId */Json_decode.field("oxfordId", Json_decode.string, json),
          /* oxfordKey */Json_decode.field("oxfordKey", Json_decode.string, json),
          /* parseAppId */Json_decode.field("parseAppId", Json_decode.string, json),
          /* parseClientKey */Json_decode.field("parseClientKey", Json_decode.string, json),
          /* parseJsKey */Json_decode.field("parseJsKey", Json_decode.string, json),
          /* parseMasterKey */Json_decode.field("parseMasterKey", Json_decode.string, json),
          /* imgurKey */Json_decode.field("imgurKey", Json_decode.string, json),
          /* giphyKey */Json_decode.field("giphyKey", Json_decode.string, json),
          /* igdbKey */Json_decode.field("igdbKey", Json_decode.string, json),
          /* imgurClient */Json_decode.field("imgurClient", Json_decode.string, json),
          /* presenceMessages */Json_decode.field("presenceMessages", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json)
        ];
}

function dictGetWithDefault(field, def, dict) {
  return Belt_Option.getWithDefault(Js_dict.get(dict, field), def);
}

function stringToTime(string) {
  switch (string) {
    case "d" :
    case "day" :
    case "days" :
        return /* days */-1033676137;
    case "h" :
    case "hour" :
    case "hours" :
        return /* hours */727985871;
    case "m" :
    case "minute" :
    case "minutes" :
        return /* minutes */-740387041;
    case "month" :
    case "months" :
        return /* months */-949055181;
    case "millisecond" :
    case "milliseconds" :
    case "ms" :
        return /* milliseconds */-952300014;
    case "s" :
    case "second" :
    case "seconds" :
        return /* seconds */-628246913;
    case "w" :
    case "week" :
    case "weeks" :
        return /* weeks */-943811073;
    case "y" :
    case "year" :
    case "years" :
    case "yrs" :
        return /* years */-293028842;
    default:
      return /* milliseconds */-952300014;
  }
}

function logErrorResolve(err) {
  return Promise.resolve((console.log("Error: ", err), /* () */0));
}

var isProd = ((process.env.NODE_ENV === 'production'));

exports.$$parseInt = $$parseInt;
exports.promiseMap = promiseMap;
exports.promiseEnd = promiseEnd;
exports.exnCode = exnCode;
exports.parseJson = parseJson;
exports.memoize = memoize;
exports.magicAsArray = magicAsArray;
exports.handleJson = handleJson;
exports.handleJsonWithErrorLog = handleJsonWithErrorLog;
exports.nullableToString = nullableToString;
exports.arrMapReduce = arrMapReduce;
exports.concat = concat;
exports.markdownwrap = markdownwrap;
exports.wrapWithString = wrapWithString;
exports.boldWrap = boldWrap;
exports.italicizeWrap = italicizeWrap;
exports.underlineWrap = underlineWrap;
exports.slashWrap = slashWrap;
exports.doubleQuoteWrap = doubleQuoteWrap;
exports.singleQuoteWrap = singleQuoteWrap;
exports.spoilerWrap = spoilerWrap;
exports.spaceForWeb = spaceForWeb;
exports.shortenString = shortenString;
exports.nextElement = nextElement;
exports.reverse = reverse;
exports.readConfigFile = readConfigFile;
exports.dictGetWithDefault = dictGetWithDefault;
exports.stringToTime = stringToTime;
exports.logErrorResolve = logErrorResolve;
exports.isProd = isProd;
/* isProd Not a pure module */
