// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var Utils$ReDiscord = require("../Utils.bs.js");
var Discord$ReDiscord = require("./Discord.bs.js");

var FriendlyError = { };

var Command = { };

var ArgumentType = { };

function directWithOptions($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, m) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(m.direct(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: Js_undefined.fromOption(reply)
                }));
}

var CommandoMessage_reply = Discord$ReDiscord.Message.reply;

var CommandoMessage = {
  reply: CommandoMessage_reply,
  directWithOptions: directWithOptions
};

var CommandoClient = { };

var CommandoGuild = { };

var GuildSettingsHelper = { };

var CommandDispatcher = { };

var SettingProvider = { };

var CommandoRegistry = { };

var CommandResolvable = { };

var CommandGroupResolvable = { };

function createInterCommand(command, run, hasPermission, client) {
  var interCommand = Curry._1(command, client);
  if (hasPermission !== undefined) {
    interCommand.hasPermission = hasPermission;
  }
  interCommand.run = run;
  return interCommand;
}

function createInterCommandObj(command, run, hasPermission, client) {
  var interCommand = Curry._1(command, client);
  if (hasPermission !== undefined) {
    interCommand.hasPermission = hasPermission;
  }
  interCommand.run = run;
  return interCommand;
}

function createFinalCommand(client, command) {
  return Curry._1(command, client);
}

function addCommands(client, commands) {
  return $$Array.of_list(List.map((function (param) {
                    return Curry._1(param, client);
                  }), commands));
}

function commandoClientUserFromMsg(msg) {
  return Belt_Option.getExn(Caml_option.nullable_to_opt(Belt_Option.getExn(msg.command).client.user));
}

exports.FriendlyError = FriendlyError;
exports.Command = Command;
exports.ArgumentType = ArgumentType;
exports.CommandoMessage = CommandoMessage;
exports.CommandoClient = CommandoClient;
exports.CommandoGuild = CommandoGuild;
exports.GuildSettingsHelper = GuildSettingsHelper;
exports.CommandDispatcher = CommandDispatcher;
exports.SettingProvider = SettingProvider;
exports.CommandoRegistry = CommandoRegistry;
exports.CommandResolvable = CommandResolvable;
exports.CommandGroupResolvable = CommandGroupResolvable;
exports.createInterCommand = createInterCommand;
exports.createInterCommandObj = createInterCommandObj;
exports.createFinalCommand = createFinalCommand;
exports.addCommands = addCommands;
exports.commandoClientUserFromMsg = commandoClientUserFromMsg;
/* Utils-ReDiscord Not a pure module */
