// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var Utils$ReDiscord = require("../Utils.bs.js");

function UserResolvable(U) {
  return { };
}

var ClientUserResolvable = { };

function RoleResolvable(R) {
  return { };
}

var BufferResolvable = { };

var PermissionResolvable = { };

var GuildMemberResolvable = { };

function rgb(r, g, b) {
  return /* array */[
          r,
          g,
          b
        ];
}

var ColorResolvable = {
  rgb: rgb
};

var StringResolvable = { };

var ChannelResolvable = { };

var GuildResolvable = { };

var Collection = { };

var Client = { };

var Guild = { };

var Role = { };

function Impl(C) {
  return { };
}

function getChannelType(string) {
  switch (string) {
    case "category" :
        return /* CategoryChannel */4;
    case "dm" :
        return /* DMChannel */0;
    case "group" :
        return /* GroupDMChannel */1;
    case "text" :
        return /* TextChannel */2;
    case "voice" :
        return /* VoiceChannel */3;
    default:
      return /* NoChannel */5;
  }
}

var Channel = {
  Impl: Impl,
  getChannelType: getChannelType
};

function Impl$1(C) {
  return { };
}

var GuildChannel = {
  Impl: Impl$1
};

function TextBasedChannel(C) {
  var send = function ($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, t) {
    var tts = $staropt$star !== undefined ? $staropt$star : false;
    var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
    return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.send(content, {
                    tts: tts,
                    nonce: Js_undefined.fromOption(nonce),
                    embed: Js_undefined.fromOption(embed),
                    disableEveryone: Js_undefined.fromOption(disableEveryone),
                    files: files,
                    code: Js_undefined.fromOption(code),
                    split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                                return {
                                        maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                        char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                        prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                        append: Js_undefined.fromOption(splitOptions[/* append */3])
                                      };
                              }))),
                    reply: Js_undefined.fromOption(reply)
                  }));
  };
  return {
          send: send
        };
}

function send($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, t) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.send(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: Js_undefined.fromOption(reply)
                }));
}

var DMChannel = {
  send: send
};

function send$1($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, t) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.send(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: Js_undefined.fromOption(reply)
                }));
}

var GroupDMChannel = {
  send: send$1
};

var VoiceChannel = { };

function send$2($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, t) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.send(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: Js_undefined.fromOption(reply)
                }));
}

var TextChannel = {
  send: send$2
};

var CategoryChannel = { };

function Impl$2(U) {
  return { };
}

function send$3($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, t) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.send(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: Js_undefined.fromOption(reply)
                }));
}

var User = {
  Impl: Impl$2,
  send: send$3
};

var UserConnection = { };

var UserProfile = { };

function setPresence(status, afk, game, t) {
  return t.setPresence({
              afk: afk,
              status: status,
              game: Belt_Option.map(game, (function (gameOptions) {
                      return {
                              name: gameOptions[/* name */0],
                              type: gameOptions[/* gameType */2],
                              url: gameOptions[/* url */1]
                            };
                    }))
            });
}

var ClientUser = {
  setPresence: setPresence
};

var Snowflake = { };

function send$4($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, reply, content, t) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.send(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: Js_undefined.fromOption(reply)
                }));
}

var GuildMember = {
  send: send$4
};

function reply($staropt$star, nonce, embed, disableEveryone, $staropt$star$1, code, split, content, t) {
  var tts = $staropt$star !== undefined ? $staropt$star : false;
  var files = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  return Utils$ReDiscord.promiseMap(Utils$ReDiscord.magicAsArray)(t.reply(content, {
                  tts: tts,
                  nonce: Js_undefined.fromOption(nonce),
                  embed: Js_undefined.fromOption(embed),
                  disableEveryone: Js_undefined.fromOption(disableEveryone),
                  files: files,
                  code: Js_undefined.fromOption(code),
                  split: Js_undefined.fromOption(Belt_Option.map(split, (function (splitOptions) {
                              return {
                                      maxLength: Js_undefined.fromOption(splitOptions[/* maxLength */0]),
                                      char: Js_undefined.fromOption(splitOptions[/* char */1]),
                                      prepend: Js_undefined.fromOption(splitOptions[/* prepend */2]),
                                      append: Js_undefined.fromOption(splitOptions[/* append */3])
                                    };
                            }))),
                  reply: undefined
                }));
}

var Message = {
  reply: reply
};

var Game = { };

var Invite = { };

var Presence = { };

var Attachment = { };

var MessageEmbed = { };

var RichEmbed = { };

exports.UserResolvable = UserResolvable;
exports.ClientUserResolvable = ClientUserResolvable;
exports.RoleResolvable = RoleResolvable;
exports.BufferResolvable = BufferResolvable;
exports.PermissionResolvable = PermissionResolvable;
exports.GuildMemberResolvable = GuildMemberResolvable;
exports.ColorResolvable = ColorResolvable;
exports.StringResolvable = StringResolvable;
exports.ChannelResolvable = ChannelResolvable;
exports.GuildResolvable = GuildResolvable;
exports.Collection = Collection;
exports.Client = Client;
exports.Guild = Guild;
exports.Role = Role;
exports.Channel = Channel;
exports.GuildChannel = GuildChannel;
exports.TextBasedChannel = TextBasedChannel;
exports.DMChannel = DMChannel;
exports.GroupDMChannel = GroupDMChannel;
exports.VoiceChannel = VoiceChannel;
exports.TextChannel = TextChannel;
exports.CategoryChannel = CategoryChannel;
exports.User = User;
exports.UserConnection = UserConnection;
exports.UserProfile = UserProfile;
exports.ClientUser = ClientUser;
exports.Snowflake = Snowflake;
exports.GuildMember = GuildMember;
exports.Message = Message;
exports.Game = Game;
exports.Invite = Invite;
exports.Presence = Presence;
exports.Attachment = Attachment;
exports.MessageEmbed = MessageEmbed;
exports.RichEmbed = RichEmbed;
/* Utils-ReDiscord Not a pure module */
